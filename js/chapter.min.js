"use strict";import DropDown from"./DropDown.min.js";import HideIt from"./HideIt.min.js";import ShowIt from"./ShowIt.min.js";import Comment from"./Comment.min.js";import Slicer from"./Slicer.min.js";$((()=>{const t=new Slicer([],{start:0,end:5}),e=+localStorage.getItem("currentBookId");new HideIt({selector:".rt-loader__content",px:"50px",seconds:.5,callback:()=>{$(".rt-loader").remove();new ShowIt({selector:"header, footer, section",seconds:.5}).smoothShow()}}).smoothHideY();let n,o,a,i,r=1,m=1;$.get("./database/books/information.json",{},(t=>{$(t).each(((t,n)=>{n.id===e&&(o=n.chapters)})),$.get(`${o[m].link}`,{dataType:"text"},(t=>{n=p(t),a=Object.keys(n).length,i=Object.keys(o).length;const e=[];let l=1;for(;l<=a;l++)e[l-1]=l;new DropDown({dataAtr:"pages",buttonSize:"normal",listSize:"100%",transition:.2,title:"Страницы",inputName:"link",list:c(a),callback:function(t){$(".rt-dropdown__item button",t).on("click",(function(){r=parseInt($(this).text()),r>a?document.location.href="book.html":($(".rt-page__text").html(n[r]),$(".rt-page__info-page").html(`Страница ${r}`),$(".rt-page__info-chapter").html(`Глава ${m}`),h())}))}}).create(),new DropDown({dataAtr:"chapters",classes:["rt-mr-default"],buttonSize:"normal",listSize:"100%",transition:.2,title:"Главы",inputName:"link",list:c(i),callback:function(t){$(".rt-dropdown__item button",t).on("click",(function(){m=parseInt($(this).text()),r=1,$.get(`${o[m].link}`,{dataType:"text"},(t=>{n=p(t),a=Object.keys(n).length,$(".rt-page__text").html(n[r]),$(".rt-page__info-page").html(`Страница ${r}`),$(".rt-page__info-chapter").html(`Глава ${m}`),h(),s()}))}))}}).create(),$(".rt-page__text").html(n[r]),$(".rt-page__info-page").html(`Страница ${r}`),$(".rt-page__info-chapter").html(`Глава ${m}`)}))})),$("button#next-page").on("click",(function(){if(r>=a){if(o[++m])return void g();document.location.href="book.html"}$(".rt-page__text").html(n[++r]),$(".rt-page__info-page").html(`Страница ${r}`),$(".rt-page__info-chapter").html(`Глава ${m}`),h()})),$("button#last-page").on("click",(function(){if(1===r){if(o[--m])return void g();document.location.href="book.html"}$(".rt-page__text").html(n[--r]),$(".rt-page__info-page").html(`Страница ${r}`),$(".rt-page__info-chapter").html(`Глава ${m}`),h()}));let l=!1;function c(t){const e=[];for(let n=1;n<=t;n++)e[n-1]=n;return e}function s(){$('[data-dropdown="pages"]').html(""),new DropDown({dataAtr:"pages",buttonSize:"normal",listSize:"100%",transition:.2,title:"Страницы",inputName:"link",list:c(a),callback:function(t){$(".rt-dropdown__item button",t).on("click",(function(){r=parseInt($(this).text()),r>a?document.location.href="book.html":($(".rt-page__text").html(n[r]),$(".rt-page__info-page").html(`Страница ${r}`),$(".rt-page__info-chapter").html(`Глава ${m}`),h())}))}}).create()}$("button#show-more-comments").on("click",(()=>{t.indexes={start:t.indexes.end,end:t.indexes.end+5},t.addSlicedComments(".rt-comments"),ShowIt.smoothShowSlicedElements(".rt-comment",t.indexes,.5),t.indexes.end<=t.data.length||(l=!0)})),Comment.dynamicTextareaHeight(),$("#main-textarea").on("submit",(function(e){e.preventDefault();const n=$("textarea",$(this));t.data.push(new Comment({name:"Гость",date:(new Date).toLocaleDateString(),text:$(n).val(),img:"./images/guest.png"})),n.val(""),t.indexes.end>=t.data.length&&(l=!0),l&&(t.indexes={start:t.data.length-1,end:t.data.length},t.addSlicedComments("#main-comments"),ShowIt.smoothShowSlicedElements(".rt-comments > .rt-comment",t.indexes,.5))}));let d=[];function h(){$.get("./database/comments/chapter-comments.json",{},(n=>{$(".rt-comments").html(""),d=[],$(n).each(((t,n)=>{n.bookId===e&&n.page===r&&d.push(new Comment(n))})),t.data=d,t.indexes={start:0,end:5},t.addSlicedComments(".rt-comments"),ShowIt.smoothShowSlicedElements(".rt-comment",t.indexes,.5)}))}function p(t){const e=t.split("");let n={},o={start:0,end:3115},a=1;return n[a]=[],$(e).each(((t,e)=>{t>=o.start&&t<=o.end?n[a]+=e:(n[++a]=[],o.start=o.end,o.end+=3115)})),n}function g(){r=1,$.get(`${o[m].link}`,{dataType:"text"},(t=>{n=p(t),a=Object.keys(n).length,$(".rt-page__text").html(n[r]),$(".rt-page__info-page").html(`Страница ${r}`),$(".rt-page__info-chapter").html(`Глава ${m}`),h(),s()}))}h()}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
