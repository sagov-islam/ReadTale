import HideIt from"./HideIt.min.js";import ReturnHTML from"./ReturnHTML.min.js";import ShowIt from"./ShowIt.min.js";export default class Comment{constructor(t){this.props=t}eventAddTextarea(){$(".rt-comment__btn").each(((t,e)=>{$(e).parent();$(e).on("click",(()=>{$(".rt-add-comment").remove(),$(".rt-comment__btn").show(),$(e).after(ReturnHTML.textarea()),$(e).hide(),setTimeout((()=>{new ShowIt({selector:".rt-add-comment",seconds:.2}).smoothShow()}),1);const t=$(".rt-add-comment textarea");t.on("input",(()=>{!$(t).scrollTop()>0||$(t).css({height:`${$(t).prop("scrollHeight")}px`})})),this.eventAddComment($("button#btn-add-comment"))}))}))}eventAddComment(t){const e=t.parent().parent(),o=$("textarea",e),n=$(t).parent();n.on("submit",(t=>{t.preventDefault(),$(".rt-comment__btn").show();const m=o.val();e.append(ReturnHTML.comment({classes:["rt-comments-inner"],text:m})),n.remove(),setTimeout((()=>{new ShowIt({selector:".rt-comments-inner",seconds:.2}).smoothShow()}),1),this.eventAddTextarea()}))}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvbW1lbnQubWluLmpzIl0sIm5hbWVzIjpbIkhpZGVJdCIsIlJldHVybkhUTUwiLCJTaG93SXQiLCJDb21tZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsInRoaXMiLCJldmVudEFkZFRleHRhcmVhIiwiJCIsImVhY2giLCJpbmRleCIsImJ0biIsInBhcmVudCIsIm9uIiwicmVtb3ZlIiwic2hvdyIsImFmdGVyIiwidGV4dGFyZWEiLCJoaWRlIiwic2V0VGltZW91dCIsInNlbGVjdG9yIiwic2Vjb25kcyIsInNtb290aFNob3ciLCJzY3JvbGxUb3AiLCJjc3MiLCJoZWlnaHQiLCJwcm9wIiwiZXZlbnRBZGRDb21tZW50IiwiY29tbWVudCIsImZvcm0iLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwidmFsdWUiLCJ2YWwiLCJhcHBlbmQiLCJjbGFzc2VzIiwidGV4dCJdLCJtYXBwaW5ncyI6Ik9BQU9BLFdBQVkseUJBQ1pDLGVBQWdCLDZCQUNoQkMsV0FBWSxpQ0FFSixNQUFNQyxRQUVqQkMsWUFBWUMsR0FDUkMsS0FBS0QsTUFBUUEsRUFJakJFLG1CQUNJQyxFQUFFLG9CQUFvQkMsTUFBSyxDQUFDQyxFQUFPQyxLQUNoQkgsRUFBRUcsR0FBS0MsU0FFdEJKLEVBQUVHLEdBQUtFLEdBQUcsU0FBUyxLQUNmTCxFQUFFLG1CQUFtQk0sU0FDckJOLEVBQUUsb0JBQW9CTyxPQUV0QlAsRUFBRUcsR0FBS0ssTUFBTWYsV0FBV2dCLFlBQ3hCVCxFQUFFRyxHQUFLTyxPQUVQQyxZQUFXLEtBQVEsSUFBSWpCLE9BQU8sQ0FBRWtCLFNBQVUsa0JBQW1CQyxRQUFTLEtBQU9DLGVBQWdCLEdBRTdGLE1BQU1MLEVBQVdULEVBQUUsNEJBQ25CUyxFQUFTSixHQUFHLFNBQVMsTUFDVkwsRUFBRVMsR0FBVU0sWUFBYyxHQUNqQ2YsRUFBRVMsR0FBVU8sSUFBSSxDQUNaQyxPQUFRLEdBQUdqQixFQUFFUyxHQUFVUyxLQUFLLHlCQUlwQ3BCLEtBQUtxQixnQkFBZ0JuQixFQUFFLGlDQUtuQ21CLGdCQUFnQmhCLEdBQ1osTUFBTWlCLEVBQVVqQixFQUFJQyxTQUFTQSxTQUN2QkssRUFBV1QsRUFBRSxXQUFZb0IsR0FDekJDLEVBQU9yQixFQUFFRyxHQUFLQyxTQUVwQmlCLEVBQUtoQixHQUFHLFVBQVdpQixJQUNmQSxFQUFNQyxpQkFFTnZCLEVBQUUsb0JBQW9CTyxPQUV0QixNQUFNaUIsRUFBUWYsRUFBU2dCLE1BQ3ZCTCxFQUFRTSxPQUFPakMsV0FBVzJCLFFBQVEsQ0FDOUJPLFFBQVMsQ0FBQyxxQkFDVkMsS0FBTUosS0FHVkgsRUFBS2YsU0FFTEssWUFBVyxLQUFRLElBQUlqQixPQUFPLENBQUVrQixTQUFVLHFCQUFzQkMsUUFBUyxLQUFPQyxlQUFnQixHQUVoR2hCLEtBQUtDIiwiZmlsZSI6IkNvbW1lbnQubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEhpZGVJdCBmcm9tICcuL0hpZGVJdC5taW4uanMnO1xyXG5pbXBvcnQgUmV0dXJuSFRNTCBmcm9tICcuL1JldHVybkhUTUwubWluLmpzJztcclxuaW1wb3J0IFNob3dJdCBmcm9tICcuL1Nob3dJdC5taW4uanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tbWVudCB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHNcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZXZlbnRBZGRUZXh0YXJlYSgpIHtcclxuICAgICAgICAkKCcucnQtY29tbWVudF9fYnRuJykuZWFjaCgoaW5kZXgsIGJ0bikgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBwYXJlbnQgPSAkKGJ0bikucGFyZW50KCk7XHJcblxyXG4gICAgICAgICAgICAkKGJ0bikub24oJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgJCgnLnJ0LWFkZC1jb21tZW50JykucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAkKCcucnQtY29tbWVudF9fYnRuJykuc2hvdygpO1xyXG5cclxuICAgICAgICAgICAgICAgICQoYnRuKS5hZnRlcihSZXR1cm5IVE1MLnRleHRhcmVhKCkpO1xyXG4gICAgICAgICAgICAgICAgJChidG4pLmhpZGUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgbmV3IFNob3dJdCh7IHNlbGVjdG9yOiAnLnJ0LWFkZC1jb21tZW50Jywgc2Vjb25kczogMC4yIH0pLnNtb290aFNob3coKSB9LCAxKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dGFyZWEgPSAkKCcucnQtYWRkLWNvbW1lbnQgdGV4dGFyZWEnKVxyXG4gICAgICAgICAgICAgICAgdGV4dGFyZWEub24oJ2lucHV0JywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICggISAkKHRleHRhcmVhKS5zY3JvbGxUb3AoKSA+IDApIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgICQodGV4dGFyZWEpLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogYCR7JCh0ZXh0YXJlYSkucHJvcCgnc2Nyb2xsSGVpZ2h0Jyl9cHhgXHJcbiAgICAgICAgICAgICAgICAgICAgfSkgXHJcbiAgICAgICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRBZGRDb21tZW50KCQoJ2J1dHRvbiNidG4tYWRkLWNvbW1lbnQnKSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGV2ZW50QWRkQ29tbWVudChidG4pIHtcclxuICAgICAgICBjb25zdCBjb21tZW50ID0gYnRuLnBhcmVudCgpLnBhcmVudCgpO1xyXG4gICAgICAgIGNvbnN0IHRleHRhcmVhID0gJCgndGV4dGFyZWEnLCBjb21tZW50KTtcclxuICAgICAgICBjb25zdCBmb3JtID0gJChidG4pLnBhcmVudCgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGZvcm0ub24oJ3N1Ym1pdCcsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgJCgnLnJ0LWNvbW1lbnRfX2J0bicpLnNob3coKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGV4dGFyZWEudmFsKClcclxuICAgICAgICAgICAgY29tbWVudC5hcHBlbmQoUmV0dXJuSFRNTC5jb21tZW50KHtcclxuICAgICAgICAgICAgICAgIGNsYXNzZXM6IFsncnQtY29tbWVudHMtaW5uZXInXSxcclxuICAgICAgICAgICAgICAgIHRleHQ6IHZhbHVlXHJcbiAgICAgICAgICAgIH0pKVxyXG5cclxuICAgICAgICAgICAgZm9ybS5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4geyBuZXcgU2hvd0l0KHsgc2VsZWN0b3I6ICcucnQtY29tbWVudHMtaW5uZXInLCBzZWNvbmRzOiAwLjIgfSkuc21vb3RoU2hvdygpIH0sIDEpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5ldmVudEFkZFRleHRhcmVhKCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbn0iXX0=
