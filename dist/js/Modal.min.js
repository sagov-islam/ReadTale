"use strict";import ReturnHTML from"./ReturnHTML.min.js";import HideIt from"./HideIt.min.js";import ShowIt from"./ShowIt.min.js";export default class Modal{constructor(t){this.props=t}create(){const t=this.props,e=this.#t();t.stars?this.#e(e):($(e).html(ReturnHTML.modalInner({title:t.title,inputs:this.#o(),agreement:t.agreement,btnText:t.btnText})),$(".rt-modal").append(e),this.#s(e),this.#n(e))}#t(){const t=this.props,e=document.createElement("div");return $(e).addClass("rt-modal__content rt-anim-top"),$(e).data().modal=t.name,e}#o(){return this.props.inputs.map((t=>`\n            <li>\n                ${ReturnHTML.input({type:t.type,name:t.name,placeholder:t.placeholder,autocomplete:t.autocomplete})}\n            </li> `))}#s(t){const e=this.props;$(`button[data-modal="${e.name}"]`).on("click",(()=>{this.#r(t)}))}#n(t){$(".rt-modal").on("mousedown",(e=>{e.target.classList.contains("rt-modal")&&this.#i(t)}))}#a(t){const e=$(".rt-stars__item",t),o=$("svg",e);$(e).on("mouseover",(function(){o.css({fill:"#444"});const t=$(this).attr("id");e.each(((e,s)=>{e>t||$(o[e]).css({fill:"#EF4800"})}))})),$(e).on("mouseout",(()=>{$("svg",e).css({fill:"#444"})})),$(e).on("click",(e=>{$(e.currentTarget).attr("id"),$(".rt-book").attr("id");this.#i(t)}))}#e(t){$(t).html(ReturnHTML.grade()),$(".rt-modal").append(t),this.#s(t),this.#a(t),this.#n(t)}#r(t){$("body > .simplebar-vertical").first().hide(),new ShowIt({selector:".rt-modal",seconds:.2}).smoothShow(),new ShowIt({selector:t,seconds:.2}).smoothShow()}#i(t){$("body > .simplebar-vertical").first().show(),new HideIt({selector:t,seconds:.2,px:"-20px"}).smoothHideY(),new HideIt({selector:".rt-modal",seconds:.2,px:"0px"}).smoothHideY()}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
